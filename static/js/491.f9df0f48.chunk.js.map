{"version":3,"file":"static/js/491.f9df0f48.chunk.js","mappings":"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","sources":["Components/website/Exams/Options/Option.js","Components/website/Exams/ExamPage.js","Contexts/ExamContext.js"],"sourcesContent":["import React, { Fragment } from 'react'\r\nimport './option.css'\r\n\r\nexport default function Option(props) {\r\n    return (\r\n        <Fragment>\r\n            {\r\n                props.onClickEvent\r\n                    ?\r\n                    <div className=\"Option\" onClick={props.onClickEvent}>\r\n                        <div className={`checkBoxCon ${props.theme}${props.checked ? ' checked' : ''}`} >\r\n                            {\r\n                                props.type == 'ok' && !props.loading\r\n                                    ?\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 507.506 507.506\" xmlSpace=\"preserve\"><g><path d=\"M163.865 436.934a54.228 54.228 0 0 1-38.4-15.915L9.369 304.966c-12.492-12.496-12.492-32.752 0-45.248 12.496-12.492 32.752-12.492 45.248 0l109.248 109.248L452.889 79.942c12.496-12.492 32.752-12.492 45.248 0 12.492 12.496 12.492 32.752 0 45.248L202.265 421.019a54.228 54.228 0 0 1-38.4 15.915z\" opacity=\"1\" dataoriginal=\"#000000\"></path></g></svg>\r\n                                    : !props.loading ?\r\n                                        <svg className='x' xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 512.021 512.021\" xmlSpace=\"preserve\"><g><path d=\"M301.258 256.01 502.645 54.645c12.501-12.501 12.501-32.769 0-45.269-12.501-12.501-32.769-12.501-45.269 0L256.01 210.762 54.645 9.376c-12.501-12.501-32.769-12.501-45.269 0s-12.501 32.769 0 45.269L210.762 256.01 9.376 457.376c-12.501 12.501-12.501 32.769 0 45.269s32.769 12.501 45.269 0L256.01 301.258l201.365 201.387c12.501 12.501 32.769 12.501 45.269 0 12.501-12.501 12.501-32.769 0-45.269L301.258 256.01z\" opacity=\"1\" dataoriginal=\"#000000\"></path></g></svg>\r\n                                        :\r\n                                        <svg className='loadingSvg' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                            <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"  opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                            </circle>\r\n                                            <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"  strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                            </circle>\r\n                                        </svg>\r\n                            }\r\n                        </div>\r\n                        <p className=\"option-text\">{props.text}</p>\r\n                        {\r\n                            props.yourChocie && <p className={`yourChoice ${props.theme}`}>انتخاب شما</p>\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <div className=\"Option\">\r\n                        <div className={`checkBoxCon ${props.theme}${props.checked && !props.loading ? ' checked' : ''}`}>\r\n                            {\r\n                                props.type == 'ok' && !props.loading\r\n                                    ?\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 507.506 507.506\" xmlSpace=\"preserve\"><g><path d=\"M163.865 436.934a54.228 54.228 0 0 1-38.4-15.915L9.369 304.966c-12.492-12.496-12.492-32.752 0-45.248 12.496-12.492 32.752-12.492 45.248 0l109.248 109.248L452.889 79.942c12.496-12.492 32.752-12.492 45.248 0 12.492 12.496 12.492 32.752 0 45.248L202.265 421.019a54.228 54.228 0 0 1-38.4 15.915z\" opacity=\"1\" dataoriginal=\"#000000\"></path></g></svg>\r\n                                    : !props.loading ?\r\n                                        <svg className='x' xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 512.021 512.021\" xmlSpace=\"preserve\"><g><path d=\"M301.258 256.01 502.645 54.645c12.501-12.501 12.501-32.769 0-45.269-12.501-12.501-32.769-12.501-45.269 0L256.01 210.762 54.645 9.376c-12.501-12.501-32.769-12.501-45.269 0s-12.501 32.769 0 45.269L210.762 256.01 9.376 457.376c-12.501 12.501-12.501 32.769 0 45.269s32.769 12.501 45.269 0L256.01 301.258l201.365 201.387c12.501 12.501 32.769 12.501 45.269 0 12.501-12.501 12.501-32.769 0-45.269L301.258 256.01z\" opacity=\"1\" dataoriginal=\"#000000\"></path></g></svg>\r\n                                        :\r\n                                        <svg className='loadingSvg' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                            <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"var(--title3)\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                            </circle>\r\n                                            <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"var(--title3)\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                            </circle>\r\n                                        </svg>\r\n                            }\r\n                        </div>\r\n                        <p className=\"option-text\">{props.text}</p>\r\n                        {\r\n                            props.yourChocie && <p className={`yourChoice ${props.theme}`}>انتخاب شما</p>\r\n                        }\r\n                    </div>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment, useContext, useEffect, useState } from 'react'\r\nimport { useLocation, useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useLoadingContext } from 'react-router-loading';\r\nimport ExamContext from '../../../Contexts/ExamContext';\r\nimport Option from './Options/Option';\r\nimport AppContext from '../../../Contexts/AppContext';\r\nimport Alert from '../../../Tools/Js/Alert';\r\n\r\nexport default function ExamPage() {\r\n\r\n    const appContext = useContext(AppContext)\r\n    const loadingContext = useLoadingContext();\r\n    let [state, setstate] = useState(null)\r\n    const examContext = useContext(ExamContext)\r\n    const param = useParams();\r\n    const navigate = useNavigate()\r\n\r\n\r\n    let [BtnLoading, setBtnLoading] = useState(false)\r\n    let [MainLoading, setMainLoading] = useState(false)\r\n\r\n    let [CurrentQ, setCurrentQ] = useState(0)\r\n    let [QuestionData, setQuestionData] = useState(false);\r\n\r\n    let [SelectedItem, setSelectedItem] = useState([])\r\n    let [SelectedItemLoading, setSelectedItemLoading] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (param.type == 'test' || param.type == 'test-again' || param.type == 'review' || param.type == 'review-again') {\r\n            appContext.HttpRequest.get(`getQuizUserId/${param.quiz_id}`)\r\n                .then(res => {\r\n                    setstate(res.data)\r\n                })\r\n                .catch(err => {\r\n                    navigate('/')\r\n                })\r\n\r\n            if (state) {\r\n                if (param.type == 'test') {\r\n\r\n                    appContext.HttpRequest.post(`testpage/${param.quiz_id}`)\r\n                        .then(res => {\r\n                            loadingContext.done()\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                            if (err.response.data == 'not ok') {\r\n                                navigate(`/quiz/${param.quiz_id}/result/test`) // result page\r\n                            }\r\n                            else if (err.response.data == 'main page') {\r\n                                navigate('/')\r\n                            }\r\n                            else {\r\n                                if (err.message == 'Request failed with status code 305') {\r\n                                    Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                                    appContext.logOut()\r\n                                }\r\n                                else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                                    Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                                }\r\n\r\n                                else {\r\n                                    Alert('error', err.response.data)\r\n                                }\r\n                            }\r\n\r\n                        })\r\n\r\n                }\r\n                else if (param.type == 'test-again') {\r\n                    appContext.HttpRequest.post(`testAgainpage/${param.quiz_id}`)\r\n                        .then(res => {\r\n                            loadingContext.done()\r\n                        })\r\n                        .catch(err => {\r\n                            if (err.response.data == 'not ok') {\r\n                                navigate(`/quiz/${param.quiz_id}/result/test`) // result page\r\n                            }\r\n                            else if (err.response.data == 'main page') {\r\n                                navigate('/')\r\n                            }\r\n                            else {\r\n                                if (err.message == 'Request failed with status code 305') {\r\n                                    Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                                    appContext.logOut()\r\n                                }\r\n                                else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                                    Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                                }\r\n\r\n                                else {\r\n                                    Alert('error', err.response.data)\r\n                                }\r\n                            }\r\n\r\n                        })\r\n                }\r\n                else if (param.type == 'review' || param.type == 'review-again') {\r\n                    appContext.HttpRequest.post(`reviewTestpageCheck/${param.quiz_id}`)\r\n                        .then(res => {\r\n                            loadingContext.done()\r\n                        })\r\n                        .catch(err => {\r\n                            if (err.response.data == 'not ok') {\r\n                                navigate(`/`)\r\n                            }\r\n                            else {\r\n                                if (err.message == 'Request failed with status code 305') {\r\n                                    Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                                    appContext.logOut()\r\n                                }\r\n                                else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                                    Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                                }\r\n\r\n                                else {\r\n                                    Alert('error', err.response.data)\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n                        })\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            navigate('/')\r\n        }\r\n\r\n\r\n    }, [state])\r\n\r\n    useEffect(() => {\r\n\r\n        requestQ(CurrentQ)\r\n\r\n    }, [CurrentQ])\r\n\r\n    function requestQ(CurrentQ) {\r\n\r\n        if (CurrentQ == 0) {\r\n            setBtnLoading(false)\r\n            setMainLoading(true)\r\n            setSelectedItem([])\r\n        }\r\n\r\n        if (param.type == 'test' || param.type == 'test-again') {\r\n            appContext.HttpRequest.post(`getQuestion/${param.quiz_id}`, {\r\n                current: CurrentQ,\r\n                type: param.type,\r\n                exam_id: state\r\n            })\r\n                .then(res => {\r\n                    setQuestionData(res.data)\r\n                    setBtnLoading(false)\r\n                    setMainLoading(false)\r\n                    setCurrentQ(CurrentQ)\r\n                })\r\n                .catch(err => {\r\n                    if (err.message == 'Request failed with status code 305') {\r\n                        Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                        appContext.logOut()\r\n                    }\r\n                    else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                        Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                    }\r\n\r\n                    else {\r\n                        Alert('error', err.response.data)\r\n                    }\r\n\r\n                    setBtnLoading(false)\r\n                    setMainLoading(false)\r\n                })\r\n        }\r\n        else if (param.type == 'review' || param.type == 'review-again') {\r\n            appContext.HttpRequest.post(`reviewTestpage/${param.quiz_id}`, {\r\n                type: param.type,\r\n                current: CurrentQ\r\n            })\r\n                .then(res => {\r\n                    setQuestionData(res.data)\r\n                    setBtnLoading(false)\r\n                    setMainLoading(false)\r\n                    setCurrentQ(CurrentQ)\r\n                })\r\n                .catch(err => {\r\n\r\n                    if (err.message == 'Request failed with status code 305') {\r\n                        Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                        appContext.logOut()\r\n                    }\r\n                    else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                        Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                    }\r\n\r\n                    else {\r\n                        Alert('error', err.response.data)\r\n                    }\r\n\r\n                    setBtnLoading(false)\r\n                    setMainLoading(true)\r\n                })\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function selectOption(id, question_id) {\r\n\r\n        setSelectedItemLoading(id)\r\n\r\n        let data = {\r\n            userquiz_id: state,\r\n            question_id: question_id,\r\n            answer_id: id,\r\n            type: param.type\r\n        }\r\n\r\n        appContext.HttpRequest.post('test/selectOption', data)\r\n            .then(res => {\r\n\r\n                let answersId = []\r\n                QuestionData.answers.forEach(item => {\r\n                    answersId.push(item.id)\r\n                })\r\n                setSelectedItem([...SelectedItem].filter(item => !answersId.includes(item)))\r\n\r\n                if (res.data == 'add') {\r\n                    setSelectedItem(prev => ([\r\n                        ...prev,\r\n                        id\r\n                    ]))\r\n                }\r\n                else {\r\n                    setSelectedItem([...SelectedItem].filter(item => item != id))\r\n                }\r\n\r\n                setSelectedItemLoading(false)\r\n            })\r\n            .catch(err => {\r\n                if (err.message == 'Request failed with status code 305') {\r\n                    Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                    appContext.logOut()\r\n                }\r\n                else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                    Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                }\r\n\r\n                else {\r\n                    Alert('error', err.response.data)\r\n                }\r\n\r\n                setSelectedItemLoading(false)\r\n            })\r\n    }\r\n\r\n    function PrevQuestion() {\r\n        if (CurrentQ != 1 || CurrentQ != 0) {\r\n            setBtnLoading('prev')\r\n            setCurrentQ(prev => prev - 1);\r\n        }\r\n    }\r\n\r\n    function NextQuestion() {\r\n        if (SelectedItem != []) {\r\n            setBtnLoading('next')\r\n            if (CurrentQ == 0) {\r\n                requestQ(2)\r\n            }\r\n            else {\r\n                requestQ(CurrentQ + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    function FinishTest() {\r\n\r\n        setBtnLoading('endBtn')\r\n\r\n        appContext.HttpRequest.post(`finishTest/${param.quiz_id}`)\r\n            .then(res => {\r\n                if (res.data == 'ok') {\r\n                    Alert('success', 'با تشکر , نتایج آزمون شما با موفقیت ثبت شد')\r\n                    navigate(`/quiz/${param.quiz_id}/result/test`)\r\n                }\r\n                setBtnLoading(false)\r\n            })\r\n            .catch(err => {\r\n                if (err.message == 'Request failed with status code 305') {\r\n                    Alert('error', 'خطایی در احراز هویت اطلاعات شما بوجود اومد')\r\n                    appContext.logOut()\r\n                }\r\n                else if (err.message != 'Request failed with status code 305' && err.message != 'Request failed with status code 302') {\r\n                    Alert('error', 'با عرض پوزش , خطایی در سیتم بوجود آومد')\r\n                }\r\n\r\n                else {\r\n                    Alert('error', err.response.data)\r\n                }\r\n\r\n                setBtnLoading(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"topQuestionBox\">\r\n                <div className=\"rightTopQBox\">\r\n                    <div className=\"IconBox-sm orange\">\r\n                        <svg viewBox=\"0 0 27 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M13.5 0C9.27889 0 5.7824 1.62766 3.38666 4.32286C1.06454 6.93525 0 10.2912 0 13.5C0 19.1431 3.30328 23.0405 5.45115 25.5747L5.56608 25.7103C8.10377 28.7066 9 29.9696 9 31.5C9 33.9853 11.0147 36 13.5 36C15.9853 36 18 33.9853 18 31.5C18 26.399 14.8317 22.697 12.8189 20.3451C12.6851 20.1887 12.5563 20.0382 12.4339 19.8937C10.0766 17.1104 9 15.5314 9 13.5C9 12.2088 9.43546 11.0648 10.1133 10.3021C10.7176 9.62234 11.7211 9 13.5 9C15.2789 9 16.2824 9.62234 16.8867 10.3021C17.5645 11.0648 18 12.2088 18 13.5C18 15.9853 20.0147 18 22.5 18C24.9853 18 27 15.9853 27 13.5C27 10.2912 25.9355 6.93525 23.6133 4.32286C21.2176 1.62766 17.7211 0 13.5 0Z\" fill=\"#FFA826\"></path>\r\n                            <path d=\"M13.5 40.5C11.0147 40.5 9 42.5147 9 45C9 47.4853 11.0147 49.5 13.5 49.5C15.9853 49.5 18 47.4853 18 45C18 42.5147 15.9853 40.5 13.5 40.5Z\" fill=\"#FFA826\"></path>\r\n                        </svg>\r\n                    </div>\r\n                    <span>{!examContext.QuizDataLoading && examContext.QuizData.title}</span>\r\n                </div>\r\n                <div className=\"leftTopQBox\">\r\n                    <div className=\"ExamDetailBox sm\">\r\n                        <svg viewBox=\"0 0 21 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fill=\"var(--info)\" d=\"M8.60653 10.2712C9.04286 10.2712 9.39658 10.625 9.39658 11.0613C9.39658 11.4976 9.04286 11.8514 8.60653 11.8514H5.44631C5.00998 11.8514 4.65625 11.4976 4.65625 11.0613C4.65625 10.625 5.00998 10.2712 5.44631 10.2712H8.60653Z\" ></path>\r\n                            <path fill=\"var(--info)\" d=\"M11.7667 13.4315C12.2031 13.4315 12.5568 13.7852 12.5568 14.2215C12.5568 14.6579 12.2031 15.0116 11.7667 15.0116H5.44631C5.00998 15.0116 4.65625 14.6579 4.65625 14.2215C4.65625 13.7852 5.00998 13.4315 5.44631 13.4315H11.7667Z\" ></path>\r\n                            <path fill=\"var(--info)\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M19.0131 1.5068C18.4058 0.91424 17.4369 0.575534 16.4609 0.366592C15.4492 0.150018 14.2789 0.0431709 13.1318 0.0112697C11.9812 -0.0207246 10.8309 0.0220756 9.8509 0.113393C8.89222 0.202726 8.03108 0.344107 7.49484 0.534369C6.4026 0.921906 5.81982 1.5946 5.56032 2.35419C5.42964 2.7367 5.38973 3.13192 5.37976 3.45868C1.01604 4.01959 0.212642 5.9401 0.944058 11.1127C1.85807 17.5766 3.73266 18.9621 11.565 18.9621C16.9894 18.9621 19.3683 18.2975 20.0146 15.7416L20.0211 15.7433C20.1398 15.2685 20.2521 14.267 20.3327 13.0701C20.4151 11.8475 20.4686 10.3523 20.4541 8.85143C20.4396 7.35488 20.3572 5.83034 20.1617 4.55782C20.0641 3.9222 19.9351 3.32852 19.7632 2.82363C19.5969 2.33501 19.3644 1.84955 19.0131 1.5068ZM18.7887 6.64433C18.7446 5.98458 18.6812 5.35995 18.5949 4.79863C18.5052 4.21454 18.3938 3.71992 18.2627 3.33459C18.126 2.933 17.9929 2.72633 17.9062 2.64171C17.6375 2.37953 17.0498 2.11407 16.1291 1.91697C15.2441 1.72751 14.1775 1.62646 13.0877 1.59615C12.0012 1.56594 10.9147 1.60662 9.99794 1.69205C9.05991 1.77946 8.36457 1.90808 8.0248 2.02863C7.36503 2.26272 7.15532 2.58881 7.06033 2.86686C7.00967 3.01517 6.98499 3.1633 6.97348 3.31923C7.6899 3.28032 8.47867 3.26336 9.34515 3.26336C14.8815 3.26336 17.441 3.95558 18.7887 6.64433ZM18.3809 11.1127C17.9211 7.86129 17.2778 6.6146 16.4057 5.97006C15.9435 5.6285 15.2495 5.32817 14.11 5.12445C12.9664 4.91999 11.4956 4.83323 9.56713 4.83323C7.63868 4.83323 6.19246 4.91999 5.10663 5.12445C4.02475 5.32817 3.41564 5.6285 3.05006 5.97006C2.36023 6.6146 2.06947 7.86129 2.52923 11.1127C2.98898 14.3641 3.63231 15.6108 4.50442 16.2554C4.96659 16.5969 5.66064 16.8973 6.80013 17.101C7.94378 17.3054 9.41454 17.3922 11.343 17.3922C13.2715 17.3922 14.7177 17.3054 15.8035 17.101C16.8854 16.8973 17.4945 16.5969 17.8601 16.2554C18.5499 15.6108 18.8407 14.3641 18.3809 11.1127Z\" fillOpacity=\"0.4\"></path>\r\n                        </svg>\r\n                        <p>\r\n                            سوال\r\n                            <span>{CurrentQ == 0 ? 1 : CurrentQ} از {!examContext.QuizDataLoading && examContext.QuizData.questions}</span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"botomQuestionBox\">\r\n                {\r\n                    MainLoading\r\n                        ?\r\n                        <div className=\"loadinPage\">\r\n                            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"var(--title)\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                </circle>\r\n                                <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"var(--title)\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                    <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                    <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                </circle>\r\n                            </svg>\r\n                        </div>\r\n                        :\r\n                        <Fragment>\r\n                            <p className=\"currentQ\">سوال {CurrentQ == 0 ? 1 : CurrentQ}</p>\r\n                            <p className=\"question-text\">{QuestionData.title}</p>\r\n                            <div className=\"optionsAllCon\">\r\n                                {\r\n                                    (param.type == 'test' || param.type == 'test-again') && QuestionData\r\n                                        ?\r\n                                        QuestionData.answers.map(answer => {\r\n\r\n                                            return <Option\r\n                                                key={'option' + answer.id}\r\n                                                checked={SelectedItem.includes(answer.id) ? true : false}\r\n                                                theme=\"orange\"\r\n                                                type=\"ok\"\r\n                                                yourChocie={false}\r\n                                                loading={SelectedItemLoading == answer.id ? true : false}\r\n                                                onClickEvent={() => selectOption(answer.id, QuestionData.id)}\r\n                                                text={answer.title}\r\n                                            />\r\n                                        })\r\n                                        : (param.type == 'review' || param.type == 'review-again') && QuestionData\r\n                                            ?\r\n                                            QuestionData.answers.map(answer => {\r\n\r\n                                                return <Option\r\n                                                    key={'option' + answer.id}\r\n                                                    checked={answer.isCorrect || answer.isUserSelected}\r\n                                                    theme={answer.isCorrect ? 'green' : !answer.isCorrect && answer.isUserSelected ? 'red' : !answer.isCorrect && !answer.isUserSelected ? 'orange' : 'orange'}\r\n                                                    type={answer.isCorrect ? 'ok' : !answer.isCorrect && answer.isUserSelected ? 'no' : 'no'}\r\n                                                    yourChocie={answer.isUserSelected}\r\n                                                    loading={SelectedItemLoading == answer.id ? true : false}\r\n                                                    text={answer.title}\r\n                                                />\r\n                                            })\r\n                                            : null\r\n                                }\r\n\r\n                            </div>\r\n                        </Fragment>\r\n                }\r\n\r\n                <div className=\"btnSlidesAll\">\r\n                    <div className={`btnSlides prev${BtnLoading == 'prev' ? ' loading' : ''}${CurrentQ == 1 || CurrentQ == 0 ? ' disable' : ''}`} onClick={PrevQuestion}>\r\n                        {\r\n                            BtnLoading == 'prev'\r\n                                ?\r\n                                <svg className='loadingSvgBtn' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                    <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                    </circle>\r\n                                    <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                        <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                        <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                        <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                    </circle>\r\n                                </svg>\r\n                                :\r\n                                <Fragment>\r\n                                    <svg className='btnSvg' viewBox=\"0 0 17 11\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path opacity=\"0.4\" d=\"M5.27333 4.58117L1.99452 4.2912C1.2587 4.2912 0.662109 4.8936 0.662109 5.63659C0.662109 6.37958 1.2587 6.98198 1.99452 6.98198L5.27333 6.69201C5.85057 6.69201 6.31856 6.21946 6.31856 5.63659C6.31856 5.05274 5.85057 4.58117 5.27333 4.58117\"></path>\r\n                                        <path d=\"M16.2826 4.63448C16.2313 4.58273 16.0399 4.36403 15.86 4.18243C14.8109 3.045 12.0716 1.18509 10.6387 0.615882C10.4211 0.525083 9.87095 0.331769 9.57604 0.3181C9.29467 0.3181 9.02587 0.383514 8.76963 0.512391C8.44959 0.693012 8.19432 0.978102 8.05315 1.31396C7.96323 1.54633 7.82206 2.24441 7.82206 2.2571C7.68186 3.01962 7.60547 4.25956 7.60547 5.63034C7.60547 6.93472 7.68186 8.1239 7.79692 8.89911C7.80949 8.91277 7.95066 9.77878 8.1044 10.0756C8.38577 10.6184 8.93594 10.9543 9.52479 10.9543H9.57604C9.95991 10.9416 10.7663 10.6048 10.7663 10.593C12.1229 10.0238 14.7974 8.25375 15.8726 7.07726C15.8726 7.07726 16.1762 6.7746 16.3077 6.58617C16.5127 6.31475 16.6152 5.97889 16.6152 5.64303C16.6152 5.26812 16.5001 4.91957 16.2826 4.63448\"></path>\r\n                                    </svg>\r\n                                    <span>سوال قبل</span>\r\n                                </Fragment>\r\n                        }\r\n\r\n                    </div>\r\n                    {\r\n                        (CurrentQ == 0 ? 1 : CurrentQ) == examContext.QuizData.questions && param.type == 'test'\r\n                            ?\r\n                            <div className={`btnSlides next${BtnLoading == 'endBtn' ? ' loading' : ''}${SelectedItem.length < (CurrentQ == 0 ? 1 : CurrentQ) ? ' disable' : ''}`} onClick={FinishTest}>\r\n                                {\r\n                                    BtnLoading == 'endBtn'\r\n                                        ?\r\n                                        <svg className='loadingSvgBtn' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                            <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                            </circle>\r\n                                            <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                            </circle>\r\n                                        </svg>\r\n                                        :\r\n                                        <span>پایان آزمون و بررسی نتایج</span>\r\n                                }\r\n\r\n                            </div>\r\n                            : (CurrentQ == 0 ? 1 : CurrentQ) == examContext.QuizData.questions && param.type == 'test-again'\r\n                                ?\r\n                                <Link to={`/quiz/${param.quiz_id}/result/test-again`} className={`btnSlides next${BtnLoading == 'endBtn' ? ' loading' : ''}${SelectedItem.length < (CurrentQ == 0 ? 1 : CurrentQ) ? ' disable' : ''}`}>\r\n                                    {\r\n                                        BtnLoading == 'endBtn'\r\n                                            ?\r\n                                            <svg className='loadingSvgBtn' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                                <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                                </circle>\r\n                                                <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                    <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                    <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                </circle>\r\n                                            </svg>\r\n                                            :\r\n                                            <span>پایان آزمون و بررسی نتایج</span>\r\n                                    }\r\n\r\n                                </Link>\r\n                                : (CurrentQ == 0 ? 1 : CurrentQ) == examContext.QuizData.questions && (param.type == 'review' || param.type == 'review-again')\r\n                                    ?\r\n                                    <Link to={`/quiz/${param.quiz_id}/result/${param.type == 'review' ? 'test' : 'test-again'}`} className={`btnSlides next${BtnLoading == 'endBtn' ? ' loading' : ''}${(SelectedItem.length < (CurrentQ == 0 ? 1 : CurrentQ)) && (param.type != 'review' && param.type != 'review-again') ? ' disable' : ''}`}>\r\n                                        {\r\n                                            BtnLoading == 'endBtn'\r\n                                                ?\r\n                                                <svg className='loadingSvgBtn' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                                    <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                                    </circle>\r\n                                                    <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                        <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                        <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                        <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                    </circle>\r\n                                                </svg>\r\n                                                :\r\n                                                <span>پایان بررسی آزمون</span>\r\n                                        }\r\n\r\n                                    </Link>\r\n                                    :\r\n                                    <div className={`btnSlides next${BtnLoading == 'next' ? ' loading' : ''}${(QuestionData &&\r\n                                        !QuestionData.answers.some(item => {\r\n                                            return SelectedItem.includes(item.id)\r\n                                        })\r\n                                    ) && (param.type != 'review' && param.type != 'review-again') ? ' disable' : ''}`} onClick={NextQuestion}>\r\n                                        {\r\n                                            BtnLoading == 'next'\r\n                                                ?\r\n                                                <svg className='loadingSvgBtn' version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"25 25 50 50\">\r\n\r\n                                                    <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" opacity=\"0.3\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"200, 300\">\r\n\r\n                                                    </circle>\r\n                                                    <circle className=\"stroke-current text-gray-500\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"6\" strokeLinecap=\"round\" strokeDashoffset=\"0\" strokeDasharray=\"100, 200\">\r\n                                                        <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" dur=\"2.5s\" repeatCount=\"indefinite\"></animateTransform>\r\n                                                        <animate attributeName=\"stroke-dashoffset\" values=\"0;-30;-124\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                        <animate attributeName=\"stroke-dasharray\" values=\"0,200;110,200;110,200\" dur=\"1.25s\" repeatCount=\"indefinite\"></animate>\r\n                                                    </circle>\r\n                                                </svg>\r\n                                                :\r\n                                                <Fragment>\r\n                                                    <span>سوال بعدی</span>\r\n                                                    <svg className='btnSvg' viewBox=\"0 0 17 11\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <path opacity=\"0.4\" d=\"M12.0001 4.58117L15.2789 4.2912C16.0147 4.2912 16.6113 4.8936 16.6113 5.63659C16.6113 6.37958 16.0147 6.98198 15.2789 6.98198L12.0001 6.69201C11.4229 6.69201 10.9549 6.21946 10.9549 5.63659C10.9549 5.05274 11.4229 4.58117 12.0001 4.58117\"></path>\r\n                                                        <path d=\"M0.990877 4.63448C1.04212 4.58273 1.23357 4.36403 1.41342 4.18243C2.46252 3.045 5.20179 1.18509 6.63476 0.615882C6.85231 0.525083 7.40249 0.331769 7.6974 0.3181C7.97877 0.3181 8.24757 0.383514 8.5038 0.512391C8.82385 0.693012 9.07912 0.978102 9.22029 1.31396C9.31021 1.54633 9.45138 2.24441 9.45138 2.2571C9.59158 3.01962 9.66797 4.25956 9.66797 5.63034C9.66797 6.93472 9.59158 8.1239 9.47652 8.89911C9.46395 8.91277 9.32278 9.77878 9.16904 10.0756C8.88767 10.6184 8.33749 10.9543 7.74864 10.9543H7.6974C7.31353 10.9416 6.50712 10.6048 6.50712 10.593C5.15054 10.0238 2.47606 8.25375 1.40085 7.07726C1.40085 7.07726 1.09724 6.7746 0.965737 6.58617C0.760751 6.31475 0.658258 5.97889 0.658258 5.64303C0.658258 5.26812 0.773321 4.91957 0.990877 4.63448\"></path>\r\n                                                    </svg>\r\n                                                </Fragment>\r\n                                        }\r\n\r\n                                    </div>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nconst ExamContext = React.createContext();\r\n\r\nexport default ExamContext"],"names":["Option","props","_jsx","Fragment","children","onClickEvent","_jsxs","className","onClick","concat","theme","checked","type","loading","version","xmlns","xmlnsXlink","viewBox","cx","cy","r","fill","opacity","strokeWidth","strokeLinecap","strokeDashoffset","strokeDasharray","attributeName","attributeType","from","to","dur","repeatCount","values","width","height","x","y","xmlSpace","d","dataoriginal","text","yourChocie","stroke","ExamPage","appContext","useContext","AppContext","loadingContext","useLoadingContext","state","setstate","useState","examContext","ExamContext","param","useParams","navigate","useNavigate","BtnLoading","setBtnLoading","MainLoading","setMainLoading","CurrentQ","setCurrentQ","QuestionData","setQuestionData","SelectedItem","setSelectedItem","SelectedItemLoading","setSelectedItemLoading","requestQ","HttpRequest","post","quiz_id","current","exam_id","then","res","data","catch","err","message","Alert","logOut","response","useEffect","get","done","console","log","QuizDataLoading","QuizData","title","fillRule","clipRule","fillOpacity","questions","answers","map","answer","isCorrect","isUserSelected","id","includes","question_id","userquiz_id","answer_id","answersId","forEach","item","push","filter","prev","selectOption","length","Link","some","React"],"sourceRoot":""}